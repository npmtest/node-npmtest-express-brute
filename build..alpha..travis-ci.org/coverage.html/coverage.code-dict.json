{"/home/travis/build/npmtest/node-npmtest-express-brute/test.js":"/* istanbul instrument in package npmtest_express_brute */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-brute/lib.npmtest_express_brute.js":"/* istanbul instrument in package npmtest_express_brute */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_express_brute = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_express_brute = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-express-brute/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-express-brute && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_express_brute */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_express_brute\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_express_brute.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_express_brute.rollup.js'] =\n            local.assetsDict['/assets.npmtest_express_brute.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_express_brute.__dirname +\n                    '/lib.npmtest_express_brute.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-express-brute/express-brute/index.js":"var _ = require('underscore');\nvar crypto = require('crypto');\n\nvar ExpressBrute = module.exports = function (store, options) {\n\tvar i;\n\tExpressBrute.instanceCount++;\n\tthis.name = \"brute\"+ExpressBrute.instanceCount;\n\t_.bindAll(this, 'reset', 'getMiddleware');\n\n\t// set options\n\tthis.options = _.extend({}, ExpressBrute.defaults, options);\n\tif (this.options.minWait < 1) {\n\t\tthis.options.minWait = 1;\n\t}\n\tthis.store = store;\n\n\t// build delays array\n\tthis.delays = [this.options.minWait];\n\twhile(this.delays[this.delays.length-1] < this.options.maxWait) {\n\t\tvar nextNum = this.delays[this.delays.length-1] + (this.delays.length > 1 ? this.delays[this.delays.length-2] : 0);\n\t\tthis.delays.push(nextNum);\n\t}\n\tthis.delays[this.delays.length-1] = this.options.maxWait;\n\n\t// set default lifetime\n\tif (typeof this.options.lifetime == \"undefined\") {\n\t\tthis.options.lifetime = (this.options.maxWait/1000)*(this.delays.length + this.options.freeRetries);\n\t\tthis.options.lifetime = Math.ceil(this.options.lifetime);\n\t}\n\n\t// generate \"prevent\" middleware\n\tthis.prevent = this.getMiddleware();\n};\nExpressBrute.prototype.getMiddleware = function (options) {\n\t// standardize input\n\toptions = _.extend({}, options);\n\tvar keyFunc = options.key;\n\tif (typeof keyFunc !== 'function') {\n\t\tkeyFunc = function (req, res, next) { next(options.key); };\n\t}\n\tvar getFailCallback = _.bind(function () {\n\t\treturn typeof options.failCallback === 'undefined' ? this.options.failCallback : options.failCallback;\n\t}, this);\n\n\t// create middleware\n\treturn _.bind(function (req, res, next) {\n\t\tkeyFunc(req, res, _.bind(function (key) {\n\t\t\tif(!options.ignoreIP) {\n\t\t\t\tkey = ExpressBrute._getKey([req.ip, this.name, key]);\n\t\t\t} else {\n\t\t\t\tkey = ExpressBrute._getKey([this.name, key]);\n\t\t\t}\n\n\t\t\t// attach a simpler \"reset\" function to req.brute.reset\n\t\t\tif (this.options.attachResetToRequest) {\n\t\t\t\tvar reset = _.bind(function (callback) {\n\t\t\t\t\tthis.store.reset(key, function (err) {\n\t\t\t\t\t\tif (typeof callback == 'function') {\n\t\t\t\t\t\t\tprocess.nextTick(function () {\n\t\t\t\t\t\t\t\tcallback(err);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}, this);\n\t\t\t\tif (req.brute && req.brute.reset) {\n\t\t\t\t\t// wrap existing reset if one exists\n\t\t\t\t\tvar oldReset = req.brute.reset;\n\t\t\t\t\tvar newReset = reset;\n\t\t\t\t\treset = function (callback) {\n\t\t\t\t\t\toldReset(function () {\n\t\t\t\t\t\t\tnewReset(callback);\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\treq.brute = {\n\t\t\t\t\treset: reset\n\t\t\t\t};\n\t\t\t}\n\n\n\t\t\t// filter request\n\t\t\tthis.store.get(key, _.bind(function (err, value) {\n\t\t\t\tif (err) {\n\t\t\t\t\tthis.options.handleStoreError({\n\t\t\t\t\t\treq: req,\n\t\t\t\t\t\tres: res,\n\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\tmessage: \"Cannot get request count\",\n\t\t\t\t\t\tparent: err\n\t\t\t\t\t});\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tvar count = 0,\n\t\t\t\t\tdelay = 0,\n\t\t\t\t\tlastValidRequestTime = this.now(),\n\t\t\t\t\tfirstRequestTime = lastValidRequestTime;\n\t\t\t\tif (value) {\n\t\t\t\t\tcount = value.count;\n\t\t\t\t\tlastValidRequestTime = value.lastRequest.getTime();\n\t\t\t\t\tfirstRequestTime = value.firstRequest.getTime();\n\n\t\t\t\t\tvar delayIndex = value.count - this.options.freeRetries - 1;\n\t\t\t\t\tif (delayIndex >= 0) {\n\t\t\t\t\t\tif (delayIndex < this.delays.length) {\n\t\t\t\t\t\t\tdelay = this.delays[delayIndex];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tdelay = this.options.maxWait;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tvar nextValidRequestTime = lastValidRequestTime+delay,\n\t\t\t\t\tremainingLifetime = this.options.lifetime || 0;\n\n\t\t\t\tif (!this.options.refreshTimeoutOnRequest && remainingLifetime > 0) {\n\t\t\t\t\tremainingLifetime = remainingLifetime - Math.floor((this.now() - firstRequestTime) / 1000);\n\t\t\t\t\tif (remainingLifetime < 1) {\n\t\t\t\t\t\t// it should be expired alredy, treat this as a new request and reset everything\n\t\t\t\t\t\tcount = 0;\n\t\t\t\t\t\tdelay = 0;\n\t\t\t\t\t\tnextValidRequestTime = firstRequestTime = lastValidRequestTime = this.now();\n\t\t\t\t\t\tremainingLifetime = this.options.lifetime || 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (nextValidRequestTime <= this.now() || count <= this.options.freeRetries) {\n\t\t\t\t\tthis.store.set(key, {\n\t\t\t\t\t\tcount: count+1,\n\t\t\t\t\t\tlastRequest: new Date(this.now()),\n\t\t\t\t\t\tfirstRequest: new Date(firstRequestTime)\n\t\t\t\t\t}, remainingLifetime, _.bind(function (err) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tthis.options.handleStoreError({\n\t\t\t\t\t\t\t\treq: req,\n\t\t\t\t\t\t\t\tres: res,\n\t\t\t\t\t\t\t\tnext: next,\n\t\t\t\t\t\t\t\tmessage: \"Cannot increment request count\",\n\t\t\t\t\t\t\t\tparent: err\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttypeof next == 'function' && next();\n\t\t\t\t\t},this));\n\t\t\t\t} else {\n\t\t\t\t\tvar failCallback = getFailCallback();\n\t\t\t\t\ttypeof failCallback === 'function' && failCallback(req, res, next, new Date(nextValidRequestTime));\n\t\t\t\t}\n\t\t\t}, this));\n\t\t},this));\n\t}, this);\n};\nExpressBrute.prototype.reset = function (ip, key, callback) {\n\tkey = ExpressBrute._getKey([ip, this.name, key]);\n\tthis.store.reset(key, _.bind(function (err) {\n\t\tif (err) {\n\t\t\tthis.options.handleStoreError({\n\t\t\t\tmessage: \"Cannot reset request count\",\n\t\t\t\tparent: err,\n\t\t\t\tkey: key,\n\t\t\t\tip: ip\n\t\t\t});\n\t\t} else {\n\t\t\tif (typeof callback == 'function') {\n\t\t\t\tprocess.nextTick(_.bind(function () {\n\t\t\t\t\tcallback.apply(this, arguments);\n\t\t\t\t}, this));\n\t\t\t}\n\t\t}\n\t},this));\n};\nExpressBrute.prototype.now = function () {\n\treturn Date.now();\n};\n\nvar setRetryAfter = function (res, nextValidRequestDate) {\n\tvar secondUntilNextRequest = Math.ceil((nextValidRequestDate.getTime() - Date.now())/1000);\n\tres.header('Retry-After', secondUntilNextRequest);\n};\nExpressBrute.FailTooManyRequests = function (req, res, next, nextValidRequestDate) {\n\tsetRetryAfter(res, nextValidRequestDate);\n\tres.status(429);\n\tres.send({error: {text: \"Too many requests in this time frame.\", nextValidRequestDate: nextValidRequestDate}});\n};\nExpressBrute.FailForbidden = function (req, res, next, nextValidRequestDate) {\n\tsetRetryAfter(res, nextValidRequestDate);\n\tres.status(403);\n\tres.send({error: {text: \"Too many requests in this time frame.\", nextValidRequestDate: nextValidRequestDate}});\n};\nExpressBrute.FailMark = function (req, res, next, nextValidRequestDate) {\n\tres.status(429);\n\tsetRetryAfter(res, nextValidRequestDate);\n\tres.nextValidRequestDate = nextValidRequestDate;\n\tnext();\n};\nExpressBrute._getKey = function (arr) {\n\tvar key = '';\n\t_(arr).each(function (part) {\n\t\tif (part) {\n\t\t\tkey += crypto.createHash('sha256').update(part).digest('base64');\n\t\t}\n\t});\n\treturn crypto.createHash('sha256').update(key).digest('base64');\n};\n\nExpressBrute.MemoryStore = require('./lib/MemoryStore');\nExpressBrute.defaults = {\n\tfreeRetries: 2,\n\tproxyDepth: 0,\n\tattachResetToRequest: true,\n\trefreshTimeoutOnRequest: true,\n\tminWait: 500,\n\tmaxWait: 1000*60*15, // 15 minutes\n\tfailCallback: ExpressBrute.FailTooManyRequests,\n\thandleStoreError: function (err) {\n\t\tthrow {\n\t\t\tmessage: err.message,\n\t\t\tparent: err.parent\n\t\t};\n\t}\n};\nExpressBrute.instanceCount = 0;\n","/home/travis/build/npmtest/node-npmtest-express-brute/express-brute/lib/MemoryStore.js":"var AbstractClientStore = require('./AbstractClientStore'),\n    _ = require('underscore'),\n    longTimeout = require('long-timeout'); // not sure this is really neccessary, since it seems like node currently supports long timeouts natively\n\nvar MemoryStore = module.exports = function (options) {\n\tthis.data = {};\n\t_.bindAll(this, 'set', 'get', 'reset');\n\tthis.options = _.extend({}, MemoryStore.defaults, options);\n};\nMemoryStore.prototype = Object.create(AbstractClientStore.prototype);\nMemoryStore.prototype.set = function (key, value, lifetime, callback) {\n\tkey = this.options.prefix+key;\n\tlifetime = lifetime || 0;\n\tvalue = JSON.stringify(value);\n\n\tif (!this.data[key]) {\n\t\tthis.data[key] = {};\n\t} else if (this.data[key].timeout) {\n\t\tlongTimeout.clearTimeout(this.data[key].timeout);\n\t}\n\tthis.data[key].value = value;\n\n\tif (lifetime) {\n\t\tthis.data[key].timeout = longTimeout.setTimeout(_.bind(function () {\n\t\t\tdelete this.data[key];\n\t\t}, this), 1000*lifetime);\n\t}\n\ttypeof callback == 'function' && callback(null);\n};\nMemoryStore.prototype.get = function (key, callback) {\n\tkey = this.options.prefix+key;\n\tvar data = this.data[key] && this.data[key].value;\n\tif (data) {\n\t\tdata = JSON.parse(data);\n\t\tdata.lastRequest = new Date(data.lastRequest);\n\t\tdata.firstRequest = new Date(data.firstRequest);\n\t}\n\ttypeof callback == 'function' && callback(null, data);\n};\nMemoryStore.prototype.reset = function (key, callback) {\n\tkey = this.options.prefix+key;\n\t\n\tif (this.data[key] && this.data[key].timeout) {\n\t\tlongTimeout.clearTimeout(this.data[key].timeout);\n\t}\n\tdelete this.data[key];\n\ttypeof callback == 'function' && callback(null);\n};\nMemoryStore.defaults = {\n\tprefix: ''\n};","/home/travis/build/npmtest/node-npmtest-express-brute/express-brute/lib/AbstractClientStore.js":"var AbstractClientStore = module.exports = function () {\n\t\n};\nAbstractClientStore.prototype.increment = function (key, lifetime, callback) {\n\tvar self = this;\n\tthis.get(key, function (err, value) {\n\t\tif (err) {\n\t\t\tcallback(err);\n\t\t} else {\n\t\t\tvar count = value ? value.count+1 : 1;\n\t\t\tself.set(key, {count: count, lastRequest: new Date(), firstRequest: new Date()}, lifetime, function (err) {\n\t\t\t\tvar prevValue = {\n\t\t\t\t\tcount: value ? value.count : 0,\n\t\t\t\t\tlastRequest: value ? value.lastRequest : null,\n\t\t\t\t\tfirstRequest: value ? value.firstRequest : null\n\t\t\t\t};\n\t\t\t\ttypeof callback == 'function' && callback(err, prevValue);\n\t\t\t});\n\t\t}\n\t});\n};"}